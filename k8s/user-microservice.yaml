apiVersion: v1
kind: ConfigMap
metadata:
  name: user-microservice-config
  labels:
    app: user-microservice
data:
  NODE_ENV: "production"
  PORT: "3000"
  MONGODB_URI: "mongodb://mongodb-service:27017/user-microservice"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "http://frontend-service:80"
---
apiVersion: v1
kind: Secret
metadata:
  name: user-microservice-secrets
  labels:
    app: user-microservice
type: Opaque
data:
  # These are base64 encoded values - in production, use a proper secret management solution
  # echo -n "your_secure_jwt_secret" | base64
  JWT_SECRET: eW91cl9zZWN1cmVfand0X3NlY3JldA==
  JWT_EXPIRATION: MWQ=  # 1d
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-microservice
  labels:
    app: user-microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-microservice
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: user-microservice
    spec:
      containers:
      - name: user-microservice
        image: ${DOCKER_USERNAME}/user-microservice:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: user-microservice-config
        - secretRef:
            name: user-microservice-secrets
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: user-microservice
  labels:
    app: user-microservice
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: user-microservice 