{
  "info": {
    "name": "Microservice API",
    "description": "Tests for the User Management Microservice API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData).to.have.property(\"timestamp\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check if the API is running correctly"
          },
          "response": []
        }
      ],
      "description": "Health check endpoints"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData).to.have.property(\"token\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"name\");",
                  "    pm.expect(jsonData.data.user).to.not.have.property(\"password\");",
                  "    ",
                  "    // Store the token for later use",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "    pm.environment.set(\"userId\", jsonData.data.user._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser{{$timestamp}}@example.com\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user"
          },
          "response": []
        },
        {
          "name": "Register Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "    pm.expect(jsonData.message).to.include(\"Email already in use\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Store the email to use it later for duplicate check",
                  "const email = \"duplicate\" + Date.now() + \"@example.com\";",
                  "pm.environment.set(\"duplicateEmail\", email);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"First User\",\n  \"email\": \"{{duplicateEmail}}\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Try to register with a duplicate email (should fail)"
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData).to.have.property(\"token\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.not.have.property(\"password\");",
                  "    ",
                  "    // Store the token for later use",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with existing credentials"
          },
          "response": []
        },
        {
          "name": "Login Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with invalid credentials (should fail)"
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"name\");",
                  "    pm.expect(jsonData.data.user).to.not.have.property(\"password\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            },
            "description": "Get the user's profile"
          },
          "response": []
        },
        {
          "name": "Get Profile Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            },
            "description": "Attempt to get profile without token (should fail)"
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile was updated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data.user.name).to.eql(pm.environment.get(\"updatedName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a random name to update",
                  "const updatedName = \"Updated User \" + Date.now();",
                  "pm.environment.set(\"updatedName\", updatedName);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{updatedName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            },
            "description": "Update the user's profile"
          },
          "response": []
        },
        {
          "name": "Update Profile Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Unauthorized Update\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            },
            "description": "Attempt to update profile without token (should fail)"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints"
    },
    {
      "name": "Admin User Management",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and admin user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData).to.have.property(\"token\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"role\");",
                  "    pm.expect(jsonData.data.user.role).to.eql(\"admin\");",
                  "    ",
                  "    // Store the admin token for later use",
                  "    pm.environment.set(\"adminToken\", jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login as admin user"
          },
          "response": []
        },
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user list\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data).to.have.property(\"users\");",
                  "    pm.expect(jsonData.data.users).to.be.an(\"array\");",
                  "    if (jsonData.data.users.length > 0) {",
                  "        pm.expect(jsonData.data.users[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData.data.users[0]).to.have.property(\"email\");",
                  "        pm.expect(jsonData.data.users[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData.data.users[0]).to.not.have.property(\"password\");",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"]
            },
            "description": "Get all users (admin only)"
          },
          "response": []
        },
        {
          "name": "Create User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"name\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"role\");",
                  "    pm.expect(jsonData.data.user).to.not.have.property(\"password\");",
                  "    ",
                  "    // Store the created user ID for later use",
                  "    pm.environment.set(\"createdUserId\", jsonData.data.user._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a unique email to create a new user",
                  "const newUserEmail = \"admin-created-\" + Date.now() + \"@example.com\";",
                  "pm.environment.set(\"newUserEmail\", newUserEmail);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Admin Created User\",\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"AdminCreated123!\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"]
            },
            "description": "Create a new user (admin only)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"_id\");",
                  "    pm.expect(jsonData.data.user._id).to.eql(pm.environment.get(\"createdUserId\"));",
                  "    pm.expect(jsonData.data.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.data.user).to.have.property(\"name\");",
                  "    pm.expect(jsonData.data.user).to.not.have.property(\"password\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{createdUserId}}"]
            },
            "description": "Get a user by ID (admin only)"
          },
          "response": []
        },
        {
          "name": "Update User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was updated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"success\");",
                  "    pm.expect(jsonData.data.user._id).to.eql(pm.environment.get(\"createdUserId\"));",
                  "    pm.expect(jsonData.data.user.name).to.eql(pm.environment.get(\"adminUpdatedName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a random name for the admin update",
                  "const adminUpdatedName = \"Admin Updated User \" + Date.now();",
                  "pm.environment.set(\"adminUpdatedName\", adminUpdatedName);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{adminUpdatedName}}\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{createdUserId}}"]
            },
            "description": "Update a user (admin only)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{createdUserId}}"]
            },
            "description": "Delete a user (admin only)"
          },
          "response": []
        },
        {
          "name": "Get Users Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"]
            },
            "description": "Attempt to access admin-only endpoint with regular user token (should fail)"
          },
          "response": []
        }
      ],
      "description": "Admin user management endpoints"
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Invalid Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/nonexistent-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nonexistent-route"]
            },
            "description": "Access a non-existent route (should return 404)"
          },
          "response": []
        },
        {
          "name": "Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"email\": \"invalid@json, \"password\": \"missing-quote\" }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Send invalid JSON (should return 400)"
          },
          "response": []
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"error\");",
                  "    pm.expect(jsonData).to.have.property(\"message\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalidtoken123"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            },
            "description": "Use an invalid token (should return 401)"
          },
          "response": []
        }
      ],
      "description": "Testing error handling"
    }
  ],
  "auth": {
    "type": "noauth"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
} 