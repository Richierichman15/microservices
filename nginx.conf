user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging Settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'request_time=$request_time upstream_response_time=$upstream_response_time';
    
    log_format json_log escape=json '{'
                             '"time": "$time_local",'
                             '"remote_addr": "$remote_addr",'
                             '"remote_user": "$remote_user",'
                             '"request": "$request",'
                             '"status": $status,'
                             '"body_bytes_sent": $body_bytes_sent,'
                             '"request_time": $request_time,'
                             '"upstream_response_time": "$upstream_response_time",'
                             '"http_referrer": "$http_referer",'
                             '"http_user_agent": "$http_user_agent",'
                             '"request_id": "$request_id",'
                             '"forwarded_for": "$http_x_forwarded_for"'
                           '}';
    
    access_log /var/log/nginx/access.log json_log;
    
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    
    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Rate Limiting Settings
    # Define limit zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # Request ID generation
    map $remote_addr $request_id {
        default $request_id_header;
    }
    
    # Upstream Definitions for Microservices
    upstream user_service {
        server user-microservice:3000 weight=3;
        server user-microservice-replica-1:3000 weight=1;
        server user-microservice-replica-2:3000 weight=1;
        keepalive 32;
    }
    
    upstream auth_service {
        server auth-microservice:3001;
        server auth-microservice-replica:3001 backup;
        keepalive 32;
    }
    
    upstream product_service {
        server product-microservice:3002;
        keepalive 32;
    }
    
    # API Gateway Configuration
    server {
        listen 80;
        listen [::]:80;
        server_name api.example.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.example.com;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/api.example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/api.example.com.key;
        
        # Add HTTP security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Generate request ID if not present
        add_header X-Request-ID $request_id;
        
        # Buffer Settings
        client_body_buffer_size 10K;
        client_header_buffer_size 1k;
        client_max_body_size 10m;
        large_client_header_buffers 2 1k;
        
        # Global CORS configuration
        add_header 'Access-Control-Allow-Origin' 'https://example.com' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, User-Agent' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://example.com';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, User-Agent';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"UP","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # User Microservice
        location /api/v1/users {
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;
            
            proxy_pass http://user_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 500 502 503 504 /api/errors/server_error;
        }
        
        # Auth Microservice
        location /api/v1/auth {
            limit_req zone=auth_limit burst=10 nodelay;
            limit_conn conn_limit 5;
            
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 500 502 503 504 /api/errors/server_error;
        }
        
        # Product Microservice
        location /api/v1/products {
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;
            
            proxy_pass http://product_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Connection "";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 500 502 503 504 /api/errors/server_error;
        }
        
        # Custom error pages
        location /api/errors/server_error {
            internal;
            default_type application/json;
            return 500 '{"status":"error","message":"An unexpected error occurred","timestamp":"$time_iso8601"}';
        }
        
        # Default catch-all handler
        location / {
            return 404 '{"status":"error","message":"Not Found","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
} 